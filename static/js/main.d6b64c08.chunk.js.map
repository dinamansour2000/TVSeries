{"version":3,"sources":["assets/loader.gif","logo.svg","components/Intro/index.js","components/SeriesList/index.js","components/Loader/index.js","containers/Series/index.js","containers/SingleSeries/index.js","components/Main/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Intro","props","className","message","SeriesListItem","series","to","show","id","name","SeriesList","list","map","key","Loader","style","width","alt","src","loaderSrc","Series","state","seriesName","isFetching","onSeriesInputChange","e","setState","target","value","fetch","then","response","json","this","type","onChange","length","trim","Component","SingleSeries","match","params","premiered","rating","average","_embedded","episodes","image","medium","replace","Logo","Main","exact","path","component","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d6b64c08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.b0a23662.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Intro = props => (\n    <p className='App-intro'>\n     {props.message}\n  </p>\n  );\n\n  export default Intro;","import React from 'react';\nimport './index.css';\nimport { Link } from 'react-router-dom';\n\nconst SeriesListItem = ({ series }) => (\n    <li>\n        <Link to={`/series/${series.show.id}`}>\n        {series.show.name}\n        </Link>\n    </li>\n)\nconst SeriesList = (props) => {\nreturn (\n    <div>\n        <ul className=\"series-list\">\n            {props.list.map(series => (\n                <SeriesListItem series={series} key={series.show.id}/>\n            ))}\n        </ul>\n    </div>\n)\n}\n\nexport default SeriesList;","import React from 'react';\nimport loaderSrc from '../../assets/loader.gif';\n\nconst Loader = props => (\n    <div>\n        <img\n        style={{ width: 75 }}\n        alt=\"Loader icon\"\n        src={loaderSrc} />\n    </div>\n);\n\nexport default Loader;\n","import React, { Component } from 'react';\nimport Intro from '../../components/Intro';\nimport SeriesList from '../../components/SeriesList';\nimport Loader from '../../components/Loader';\n\nclass Series extends Component{\n    state = {\n        series: [],\n        seriesName: '',\n        isFetching: false \n      }\n      onSeriesInputChange = e => {\n        this.setState({ seriesName: e.target.value, isFetching: true });\n\n        fetch(`https://api.tvmaze.com/search/shows?q=${e.target.value}`)\n        .then( (response) => response.json())\n        .then(json => this.setState({series: json, isFetching: false}));\n      }\n    render() {\n        const { series, seriesName, isFetching } = this.state;\n        return (\n            <div>\n                <Intro message=\"Here you can find all of your most loved series\"/>\n                <div>\n                    <input \n                    value={seriesName}\n                    type=\"text\" \n                    onChange={this.onSeriesInputChange} />\n                </div>\n                {\n                    !isFetching && series.length === 0 && seriesName.trim() === ''\n                    &&\n                    <p>Please enter series name into the input</p>\n                }\n                {\n                    !isFetching && series.length === 0 && seriesName.trim() !== ''\n                    &&\n                    <p>No TV series has been found with this name</p>\n                }\n                {\n                    isFetching && <Loader />\n                }\n                {\n                    \n                    !isFetching && <SeriesList list={this.state.series} />\n                }\n            </div>\n        );\n    }\n}\n\nexport default Series;","import React, { Component } from 'react';\nimport Loader from '../../components/Loader';\nimport Logo from '../../logo.svg'\n\nclass SingleSeries extends Component {\nstate = {\n    show: null\n}\n\ncomponentDidMount() {\n    const { id } = this.props.match.params;\n\n    fetch(`https://api.tvmaze.com/shows/${id}?embed=episodes`)\n    .then( (response) => response.json())\n    .then(json => this.setState({ show: json}));\n}\n\nrender() {\n    const { show } = this.state;\n    \n    return (\n        <div>\n        { show === null && <Loader />}\n        {\n          show !== null \n          &&\n          <div>\n          <p>{show.name}</p>\n          <p>Premiered : {show.premiered}</p>\n          <p>Rating : {show.rating.average}</p>\n          <p>Episodes : {show._embedded.episodes.length}</p>\n          <p>\n            {\n            show.image !== null   \n              && \n            <img alt=\"Show\" \n            src={show.image.medium.replace('http','https')}\n             />\n            }\n          \n              {\n                  show.image === null\n                  &&\n                  <img alt=\"No Image\" src={Logo} style={{ width: 300 }}/>\n              }  \n          </p>\n          </div>\n        }\n        </div>\n    )\n  }\n} \n\nexport default SingleSeries;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Series from '../../containers/Series';\nimport SingleSeries from '../../containers/SingleSeries';\n\nconst Main = props => (\n    <Switch>\n        <Route exact path='/' component={Series} />\n        <Route path='/series/:id' component={SingleSeries} />\n    </Switch>\n);\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Main from '../Main';\nimport './App.css';\nimport 'whatwg-fetch';\n\nclass App extends Component {\n  render() {\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className='App-title'>TV Series List</h1>\n      </header>\n       <Main />\n    </div>\n    );\n  }\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter ><App /></BrowserRouter>,\n document.getElementById('root')\n );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n \n"],"sourceRoot":""}